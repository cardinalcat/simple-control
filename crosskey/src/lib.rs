#[macro_use]extern crate serde_derive;
use device_query::keymap::Keycode;
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
pub enum CrossKey {
    Key0,
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    LControl,
    RControl,
    RShift,
    LShift,
    CapLock,
    LAlt,
    RAlt,
    Tab,
    Esc,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    Down,
    Up,
    Left,
    Right,
    Backspace,
    Delete,
    Backslash,
    Apostrophe,
    End,
    Enter,
    Super,
    Comma,
    Period,
    Equal,
    LeftBracket,
    Minus,
    RightBracket,
    Semicolon,
    Space,
    Slash,
    PageUp,
    PageDown,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    Option,
    M,
    N,
    O,
    P,
    Q,
    R,
    Home,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Backquote,
    Unknown,
}
impl CrossKey {
    pub fn as_enigo_key(&self) -> Option<enigo::Key>{
        match self {
            CrossKey::RAlt => Some(enigo::Key::Alt),
            CrossKey::LAlt => Some(enigo::Key::Alt),
            CrossKey::Backspace => Some(enigo::Key::Backspace),
            CrossKey::CapLock => Some(enigo::Key::CapsLock),
            CrossKey::LControl => Some(enigo::Key::Control),
            CrossKey::RControl => Some(enigo::Key::Control),
            CrossKey::Delete => Some(enigo::Key::Delete),
            CrossKey::Down => Some(enigo::Key::DownArrow),
            CrossKey::End => Some(enigo::Key::End),
            CrossKey::Esc => Some(enigo::Key::Escape),
            CrossKey::F1 => Some(enigo::Key::F1),
            CrossKey::F10 => Some(enigo::Key::F10),
            CrossKey::F11 => Some(enigo::Key::F11),
            CrossKey::F12 => Some(enigo::Key::F12),
            CrossKey::F2 => Some(enigo::Key::F2),
            CrossKey::F3 => Some(enigo::Key::F3),
            CrossKey::F4 => Some(enigo::Key::F4),
            CrossKey::F5 => Some(enigo::Key::F5),
            CrossKey::F6 => Some(enigo::Key::F6),
            CrossKey::F7 => Some(enigo::Key::F7),
            CrossKey::F8 => Some(enigo::Key::F8),
            CrossKey::F9 => Some(enigo::Key::F9),
            CrossKey::Home => Some(enigo::Key::Home),
            CrossKey::Left => Some(enigo::Key::LeftArrow),
            CrossKey::Super => Some(enigo::Key::Meta),
            CrossKey::Option => Some(enigo::Key::Option),
            CrossKey::PageDown => Some(enigo::Key::PageDown),
            CrossKey::PageUp => Some(enigo::Key::PageUp),
            CrossKey::Enter => Some(enigo::Key::Return),
            CrossKey::Right => Some(enigo::Key::RightArrow),
            CrossKey::LShift => Some(enigo::Key::Shift),
            CrossKey::RShift => Some(enigo::Key::Shift),
            CrossKey::Space => Some(enigo::Key::Space),
            CrossKey::Tab => Some(enigo::Key::Tab),
            CrossKey::Up => Some(enigo::Key::UpArrow),
            CrossKey::A => Some(enigo::Key::Layout('a')),
            CrossKey::B => Some(enigo::Key::Layout('b')),
            CrossKey::C => Some(enigo::Key::Layout('c')),
            CrossKey::D => Some(enigo::Key::Layout('d')),
            CrossKey::E => Some(enigo::Key::Layout('e')),
            CrossKey::F => Some(enigo::Key::Layout('f')),
            CrossKey::G => Some(enigo::Key::Layout('g')),
            CrossKey::H => Some(enigo::Key::Layout('h')),
            CrossKey::I => Some(enigo::Key::Layout('i')),
            CrossKey::J => Some(enigo::Key::Layout('j')),
            CrossKey::K => Some(enigo::Key::Layout('k')),
            CrossKey::L => Some(enigo::Key::Layout('l')),
            CrossKey::M => Some(enigo::Key::Layout('m')),
            CrossKey::N => Some(enigo::Key::Layout('n')),
            CrossKey::O => Some(enigo::Key::Layout('o')),
            CrossKey::P => Some(enigo::Key::Layout('p')),
            CrossKey::Q => Some(enigo::Key::Layout('q')),
            CrossKey::R => Some(enigo::Key::Layout('r')),
            CrossKey::S => Some(enigo::Key::Layout('s')),
            CrossKey::T => Some(enigo::Key::Layout('t')),
            CrossKey::U => Some(enigo::Key::Layout('u')),
            CrossKey::V => Some(enigo::Key::Layout('v')),
            CrossKey::W => Some(enigo::Key::Layout('w')),
            CrossKey::X => Some(enigo::Key::Layout('x')),
            CrossKey::Y => Some(enigo::Key::Layout('y')),
            CrossKey::Z => Some(enigo::Key::Layout('z')),
            CrossKey::Comma => Some(enigo::Key::Layout(',')),
            CrossKey::Period => Some(enigo::Key::Layout('.')),
            CrossKey::Slash => Some(enigo::Key::Layout('/')),
            CrossKey::Backslash => Some(enigo::Key::Layout('\\')),
            CrossKey::Semicolon => Some(enigo::Key::Layout(';')),
            CrossKey::LeftBracket => Some(enigo::Key::Layout('[')),
            CrossKey::RightBracket => Some(enigo::Key::Layout(']')),
            CrossKey::Minus => Some(enigo::Key::Layout('-')),
            CrossKey::Equal => Some(enigo::Key::Layout('=')),
            CrossKey::Key0 => Some(enigo::Key::Layout('0')),
            CrossKey::Key1 => Some(enigo::Key::Layout('1')),
            CrossKey::Key2 => Some(enigo::Key::Layout('2')),
            CrossKey::Key3 => Some(enigo::Key::Layout('3')),
            CrossKey::Key4 => Some(enigo::Key::Layout('4')),
            CrossKey::Key5 => Some(enigo::Key::Layout('5')),
            CrossKey::Key6 => Some(enigo::Key::Layout('6')),
            CrossKey::Key7 => Some(enigo::Key::Layout('7')),
            CrossKey::Key8 => Some(enigo::Key::Layout('8')),
            CrossKey::Key9 => Some(enigo::Key::Layout('9')),
            CrossKey::Apostrophe => Some(enigo::Key::Layout('\'')),
            CrossKey::Backquote => Some(enigo::Key::Layout('`')),
            _ => None,
        }
    }
}
/*impl From<CrossKey> for Option<char> {
    fn from(key: CrossKey) -> Option<char> {
        CrossKey::Key0 => Some('0'),
        CrossKey::Key1 => Some('1'),
        CrossKey::Key2 => Some('2'),
        CrossKey::Key3 => Some('3'),
        CrossKey::Key4 => Some('4'),
        CrossKey::Key5 => Some('5'),
        CrossKey::Key6 => Some('6'),
        CrossKey::Key7 => Some('7'),
        CrossKey::Key8 => Some('8'),
        CrossKey::Key9 => Some('9'),
        CrossKey::Control => Some('^'),
        CrossKey::Shift,
        CrossKey::CapLock,
        CrossKey::Tab,
        CrossKey::Esc => Some('^['),
        CrossKey::F1,
        CrossKey::F2,
        CrossKey::F3,
        CrossKey::F4,
        CrossKey::F5,
        CrossKey::F6,
        CrossKey::F7,
        CrossKey::F8,
        CrossKey::F9,
        CrossKey::F10,
        CrossKey::F11,
        CrossKey::F12,
        CrossKey::F13,
        CrossKey::F14,
        CrossKey::F15,
        CrossKey::Down,
        CrossKey::Up,
        CrossKey::Left,
        CrossKey::Right,
        CrossKey::Backspace,
        CrossKey::Delete,
        CrossKey::End,
        CrossKey::Enter,
        CrossKey::Super,
        CrossKey::A => Some('a'),
        CrossKey::B => Some('b'),
        CrossKey::C => Some('c'),
        CrossKey::D => Some('d'),
        CrossKey::E => Some('e'),
        CrossKey::F => Some('f'),
        CrossKey::G => Some('g'),
        CrossKey::H => Some('h'),
        CrossKey::I => Some('i'),
        CrossKey::J => Some('j'),
        CrossKey::K => Some('k'),
        CrossKey::L => Some('l'),
        CrossKey::M => Some('m'),
        CrossKey::N => Some('n'),
        CrossKey::O => Some('o'),
        CrossKey::P => Some('p'),
        CrossKey::Q => Some('q'),
        CrossKey::R => Some('r'),
        CrossKey::S => Some('s'),
        CrossKey::T => Some('t'),
        CrossKey::U => Some('u'),
        CrossKey::V => Some('v'),
        CrossKey::W => Some('w'),
        CrossKey::X => Some('x'),
        CrossKey::Y => Some('y'),
        CrossKey::Z => Some('z'),
    }
}*/
impl From<u16> for CrossKey {
    fn from(val: u16) -> CrossKey {
        match val {
            0 => CrossKey::Key0,
            1 => CrossKey::Key1,
            2 => CrossKey::Key2,
            3 => CrossKey::Key3,
            4 => CrossKey::Key4,
            5 => CrossKey::Key5,
            6 => CrossKey::Key6,
            7 => CrossKey::Key7,
            8 => CrossKey::Key8,
            9 => CrossKey::Key9,
            10 => CrossKey::LControl,
            11 => CrossKey::LShift,
            12 => CrossKey::CapLock,
            13 => CrossKey::Tab,
            14 => CrossKey::Esc,
            15 => CrossKey::F1,
            16 => CrossKey::F2,
            17 => CrossKey::F3,
            18 => CrossKey::F4,
            19 => CrossKey::F5,
            20 => CrossKey::F6,
            21 => CrossKey::F7,
            22 => CrossKey::F8,
            23 => CrossKey::F9,
            24 => CrossKey::F10,
            25 => CrossKey::F11,
            26 => CrossKey::F12,
            27 => CrossKey::F13,
            28 => CrossKey::F14,
            29 => CrossKey::F15,
            30 => CrossKey::Down,
            31 => CrossKey::Up,
            32 => CrossKey::Left,
            33 => CrossKey::Right,
            34 => CrossKey::Backspace,
            35 => CrossKey::Delete,
            36 => CrossKey::End,
            37 => CrossKey::Enter,
            38 => CrossKey::Super,
            39 => CrossKey::Apostrophe,
            40 => CrossKey::Backslash,
            41 => CrossKey::Comma,
            42 => CrossKey::Period,
            43 => CrossKey::Equal,
            44 => CrossKey::LeftBracket,
            45 => CrossKey::Minus,
            46 => CrossKey::RightBracket,
            47 => CrossKey::Semicolon,
            48 => CrossKey::Space,
            49 => CrossKey::RAlt,
            _ => CrossKey::Unknown,
        }
    }
}
impl From<minifb::Key> for CrossKey {
    fn from(key: minifb::Key) -> CrossKey {
        match key {
            minifb::Key::Key0 => CrossKey::Key0,
            minifb::Key::Key1 => CrossKey::Key1,
            minifb::Key::Key2 => CrossKey::Key2,
            minifb::Key::Key3 => CrossKey::Key3,
            minifb::Key::Key4 => CrossKey::Key4,
            minifb::Key::Key5 => CrossKey::Key5,
            minifb::Key::Key6 => CrossKey::Key6,
            minifb::Key::Key7 => CrossKey::Key7,
            minifb::Key::Key8 => CrossKey::Key8,
            minifb::Key::Key9 => CrossKey::Key9,
            minifb::Key::A => CrossKey::A,
            minifb::Key::B => CrossKey::B,
            minifb::Key::C => CrossKey::C,
            minifb::Key::D => CrossKey::D,
            minifb::Key::E => CrossKey::E,
            minifb::Key::F => CrossKey::F,
            minifb::Key::G => CrossKey::G,
            minifb::Key::H => CrossKey::H,
            minifb::Key::I => CrossKey::I,
            minifb::Key::J => CrossKey::J,
            minifb::Key::K => CrossKey::K,
            minifb::Key::L => CrossKey::L,
            minifb::Key::M => CrossKey::M,
            minifb::Key::N => CrossKey::N,
            minifb::Key::O => CrossKey::O,
            minifb::Key::P => CrossKey::P,
            minifb::Key::Q => CrossKey::Q,
            minifb::Key::R => CrossKey::R,
            minifb::Key::S => CrossKey::S,
            minifb::Key::T => CrossKey::T,
            minifb::Key::U => CrossKey::U,
            minifb::Key::V => CrossKey::V,
            minifb::Key::W => CrossKey::W,
            minifb::Key::X => CrossKey::X,
            minifb::Key::Y => CrossKey::Y,
            minifb::Key::Z => CrossKey::Z,
            minifb::Key::F1 => CrossKey::F1,
            minifb::Key::F2 => CrossKey::F2,
            minifb::Key::F3 => CrossKey::F3,
            minifb::Key::F4 => CrossKey::F4,
            minifb::Key::F5 => CrossKey::F5,
            minifb::Key::F6 => CrossKey::F6,
            minifb::Key::F7 => CrossKey::F7,
            minifb::Key::F8 => CrossKey::F8,
            minifb::Key::F9 => CrossKey::F9,
            minifb::Key::F10 => CrossKey::F10,
            minifb::Key::F11 => CrossKey::F11,
            minifb::Key::F12 => CrossKey::F12,
            minifb::Key::F13 => CrossKey::F13,
            minifb::Key::F14 => CrossKey::F14,
            minifb::Key::F15 => CrossKey::F15,
            minifb::Key::Down => CrossKey::Down,
            minifb::Key::Left => CrossKey::Left,
            minifb::Key::Right => CrossKey::Right,
            minifb::Key::Up => CrossKey::Up,
            minifb::Key::Apostrophe => CrossKey::Apostrophe,
            minifb::Key::Backquote => CrossKey::Backquote,
            minifb::Key::Backslash => CrossKey::Backslash,
            minifb::Key::Comma => CrossKey::Comma,
            minifb::Key::Equal => CrossKey::Equal,
            minifb::Key::LeftBracket => CrossKey::LeftBracket,
            minifb::Key::Minus => CrossKey::Minus,
            minifb::Key::Period => CrossKey::Period,
            minifb::Key::RightBracket => CrossKey::RightBracket,
            minifb::Key::Semicolon => CrossKey::Semicolon,
            minifb::Key::Slash => CrossKey::Slash,
            minifb::Key::Backspace => CrossKey::Backspace,
            minifb::Key::Delete => CrossKey::Delete,
            minifb::Key::End => CrossKey::Unknown,
            minifb::Key::Enter => CrossKey::Unknown,
            minifb::Key::Escape => CrossKey::Esc,
            minifb::Key::Home => CrossKey::Home,
            minifb::Key::Insert => CrossKey::Unknown,
            minifb::Key::Menu => CrossKey::Unknown,
            minifb::Key::PageDown => CrossKey::Unknown,
            minifb::Key::PageUp => CrossKey::Unknown,
            minifb::Key::Pause => CrossKey::Unknown,
            minifb::Key::Space => CrossKey::Space,
            minifb::Key::Tab => CrossKey::Tab,
            minifb::Key::NumLock => CrossKey::Unknown,
            minifb::Key::CapsLock => CrossKey::CapLock,
            minifb::Key::ScrollLock => CrossKey::Unknown,
            minifb::Key::LeftShift => CrossKey::LShift,
            minifb::Key::RightShift => CrossKey::RShift,
            minifb::Key::LeftCtrl => CrossKey::LControl,
            minifb::Key::RightCtrl => CrossKey::RControl,
            minifb::Key::NumPad0 => CrossKey::Key0,
            minifb::Key::NumPad1 => CrossKey::Key1,
            minifb::Key::NumPad2 => CrossKey::Key2,
            minifb::Key::NumPad3 => CrossKey::Key3,
            minifb::Key::NumPad4 => CrossKey::Key4,
            minifb::Key::NumPad5 => CrossKey::Key5,
            minifb::Key::NumPad6 => CrossKey::Key6,
            minifb::Key::NumPad7 => CrossKey::Key7,
            minifb::Key::NumPad8 => CrossKey::Key8,
            minifb::Key::NumPad9 => CrossKey::Key9,
            minifb::Key::NumPadDot => CrossKey::Period,
            minifb::Key::NumPadSlash => CrossKey::Slash,
            minifb::Key::NumPadAsterisk => CrossKey::Unknown,
            minifb::Key::NumPadMinus => CrossKey::Minus,
            minifb::Key::NumPadPlus => CrossKey::Unknown,
            minifb::Key::NumPadEnter => CrossKey::Enter,
            minifb::Key::LeftAlt => CrossKey::LAlt,
            minifb::Key::RightAlt => CrossKey::RAlt,
            minifb::Key::LeftSuper => CrossKey::Super,
            minifb::Key::RightSuper => CrossKey::Super,
            _ => CrossKey::Unknown,
        }
    }
}
impl From<&device_query::keymap::Keycode> for CrossKey{
    fn from(key: &device_query::keymap::Keycode) -> CrossKey{
        match key {
            Keycode::Key0 => CrossKey::Key0,
            Keycode::Key1 => CrossKey::Key1,
            Keycode::Key2 => CrossKey::Key2,
            Keycode::Key3 => CrossKey::Key3,
            Keycode::Key4 => CrossKey::Key4,
            Keycode::Key5 => CrossKey::Key5,
            Keycode::Key6 => CrossKey::Key6,
            Keycode::Key7 => CrossKey::Key7,
            Keycode::Key8 => CrossKey::Key8,
            Keycode::Key9 => CrossKey::Key9,
            Keycode::A => CrossKey::A,
            Keycode::B => CrossKey::B,
            Keycode::C => CrossKey::C,
            Keycode::D => CrossKey::D,
            Keycode::E => CrossKey::E,
            Keycode::F => CrossKey::F,
            Keycode::G => CrossKey::G,
            Keycode::H => CrossKey::H,
            Keycode::I => CrossKey::I,
            Keycode::J => CrossKey::J,
            Keycode::K => CrossKey::K,
            Keycode::L => CrossKey::L,
            Keycode::M => CrossKey::M,
            Keycode::N => CrossKey::N,
            Keycode::O => CrossKey::O,
            Keycode::P => CrossKey::P,
            Keycode::Q => CrossKey::Q,
            Keycode::R => CrossKey::R,
            Keycode::S => CrossKey::S,
            Keycode::T => CrossKey::T,
            Keycode::U => CrossKey::U,
            Keycode::V => CrossKey::V,
            Keycode::W => CrossKey::W,
            Keycode::X => CrossKey::X,
            Keycode::Y => CrossKey::Y,
            Keycode::Z => CrossKey::Z,
            Keycode::F1 => CrossKey::F1,
            Keycode::F2 => CrossKey::F2,
            Keycode::F3 => CrossKey::F3,
            Keycode::F4 => CrossKey::F4,
            Keycode::F5 => CrossKey::F5,
            Keycode::F6 => CrossKey::F6,
            Keycode::F7 => CrossKey::F7,
            Keycode::F8 => CrossKey::F8,
            Keycode::F9 => CrossKey::F9,
            Keycode::F10 => CrossKey::F10,
            Keycode::F11 => CrossKey::F11,
            Keycode::F12 => CrossKey::F12,
            Keycode::Escape => CrossKey::Esc,
            Keycode::Space => CrossKey::Space,
            Keycode::LControl => CrossKey::LControl,
            Keycode::RControl => CrossKey::RControl,
            Keycode::LShift => CrossKey::LShift,
            Keycode::RShift => CrossKey::RShift,
            Keycode::LAlt => CrossKey::LAlt,
            Keycode::RAlt => CrossKey::RAlt,
            Keycode::Meta => CrossKey::Super,
            Keycode::Enter => CrossKey::Enter,
            Keycode::Up => CrossKey::Up,
            Keycode::Down => CrossKey::Down,
            Keycode::Left => CrossKey::Left,
            Keycode::Right => CrossKey::Right,
            Keycode::Backspace => CrossKey::Backspace,
            Keycode::CapsLock => CrossKey::CapLock,
            Keycode::Tab => CrossKey::Tab,
            Keycode::Home => CrossKey::Home,
            Keycode::End => CrossKey::End,
            Keycode::PageUp => CrossKey::PageUp,
            Keycode::PageDown => CrossKey::PageDown,
            Keycode::Insert => CrossKey::Unknown,
            Keycode::Delete => CrossKey::Delete,
            Keycode::Grave => CrossKey::Backquote,
            Keycode::Minus => CrossKey::Minus,
            Keycode::Equal => CrossKey::Equal,
            Keycode::LeftBracket => CrossKey::LeftBracket,
            Keycode::RightBracket => CrossKey::RightBracket,
            Keycode::BackSlash => CrossKey::Backslash,
            Keycode::Semicolon => CrossKey::Semicolon,
            Keycode::Apostrophe => CrossKey::Apostrophe,
            Keycode::Comma => CrossKey::Comma,
            Keycode::Dot => CrossKey::Period,
            Keycode::Slash => CrossKey::Slash,
        }
    }
}